# Nombre del Workflow
name: CI/CD Pipeline AWS ECS con CloudFormation

# Disparadores del Workflow
on:
  push:
    branches:
      - main # Se ejecuta en push a la rama main
  pull_request:
    branches:
      - main # Se ejecuta en pull requests hacia main
  workflow_dispatch: # Permite ejecución manual desde la UI de GitHub Actions

# Definición de los trabajos (Jobs)
jobs:
  # -------------------------------------
  # Job de CI (Build, Test, Publish Docker Image)
  # -------------------------------------
  build-test-publish:
    runs-on: ubuntu-latest # Runner a utilizar
    outputs:
      repo_name: ${{ steps.set_outputs.outputs.repo_name }}
      image_tag: ${{ steps.set_outputs.outputs.image_tag }}

    steps:
      # 1. Checkout del código del repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar el entorno de Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12' # Especificar versión de Python

      # 3. Instalar dependencias de Python
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Instalar paquetes listados en requirements.txt

      # 4. Ejecutar Black (Formateador de código) en modo chequeo
      - name: Run Black (Formatter)
        run: black app --check

      # 5. Ejecutar Pylint (Linter) y guardar reporte
      - name: Run Pylint (Linter)
        run: pylint app --output-format=text --fail-under=9 > pylint-report.txt || true # Continúa aunque falle Pylint (para Sonar)

      # 6. Ejecutar Flake8 (Linter) y guardar reporte
      - name: Run Flake8 (Linter)
        run: flake8 app --output-file=flake8-report.txt || true # Continúa aunque falle Flake8 (para Sonar)

      # 7. Ejecutar Pruebas Unitarias con Pytest y generar reporte de cobertura
      - name: Run Unit Tests with pytest and Coverage
        run: |
          # Ejecuta solo pruebas unitarias, excluyendo aceptación y humo
          pytest --ignore=tests/test_acceptance_app.py  --ignore=tests/test_smoke_app.py  # Genera un informe XML para SonarCloud

      # SE ELIMINAN DEL JOB DE CI EL PASO DE ACCEPTANCE TESTS, PASA AL JOB DE CD.

      # 7.1. Cargar reportes de cobertura y pruebas unitarias como artefactos
      - name: Upload Test Reports Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            htmlcov/
            report.html

      # 9. Ejecutar análisis con SonarCloud
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Automáticamente proporcionado
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # El secreto que creaste

      # --- Pasos de Docker (solo en push a main) ---

      # 9. Configurar QEMU (para buildx multi-plataforma, aunque no lo usemos explícitamente)
      - name: Set up QEMU
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-qemu-action@v3

      # 10. Configurar Docker Buildx (constructor avanzado)
      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      # 11. Iniciar sesión en Docker Hub
      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 12. Construir y pushear imagen Docker a Docker Hub
      - name: Build and push Docker image
        id: docker_build_push # Darle ID para referenciar output
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 13. Establecer las salidas del job usadas para el despliegue
      - name: Set Job Outputs
        id: set_outputs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "repo_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT


  # -------------------------------------
  # Job de Despliegue CloudFormation Staging
  # -------------------------------------
  deploy-cfn-staging:
    needs: build-test-publish # Depende del job anterior (necesita image_uri)
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Solo en push a main
    outputs:
      alb_url_staging: ${{ steps.get_stack_outputs.outputs.alb_url }}
      cluster_name_staging: "calculadora-staging-cluster"
      service_name_staging: "calculadora-staging-service"

    steps:
      # 1. Checkout del código (para acceder a template.yaml)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 3. Desplegar/Actualizar el stack CloudFormation de Staging
      - name: Deploy CloudFormation Staging Stack
        run: |
          # Reconstruir la URI de la imagen usando el secreto y las salidas separadas
          IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-test-publish.outputs.repo_name }}:${{ needs.build-test-publish.outputs.image_tag }}"
          echo "Deploying Image URI: $IMAGE_URI" # Log para verificar (el username se ocultará aquí)

          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name calculadora-staging-stack \
            --parameter-overrides \
              EnvironmentName=staging \
              DockerImageUri=$IMAGE_URI \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changes # No falla si no hay cambios en la plantilla

      # 4. Obtener las salidas del Stack CloudFormation Staging
      - name: Get Staging Stack Outputs
        id: get_stack_outputs
        run: |
          # Instalar jq si no está presente (común en ubuntu-latest, pero por si acaso)
          if ! command -v jq &> /dev/null; then
             sudo apt-get update && sudo apt-get install -y jq
          fi

          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name calculadora-staging-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Stack Outputs: $STACK_OUTPUTS" # Log para depuración

          # Extraer la URL del ALB (ALBDnsName)
          ALB_URL=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')

          if [ -z "$ALB_URL" ] || [ "$ALB_URL" == "null" ]; then
            echo "Error: No se pudo obtener ALBDnsName del stack de Staging."
            exit 1
          fi

          # Añadir http:// al inicio ya que el DNSName no lo incluye
          ALB_URL_HTTP="http://${ALB_URL}/"
          echo "ALB URL Staging: $ALB_URL_HTTP"
          echo "alb_url=${ALB_URL_HTTP}" >> $GITHUB_OUTPUT

  # -------------------------------------
  # Job de Actualización Servicio Staging (ECS - Forzar despliegue)
  # -------------------------------------
  update-service-staging:
    # Depende de que CFN haya actualizado la Task Definition
    needs: [build-test-publish, deploy-cfn-staging]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 2. Forzar un nuevo despliegue en el servicio ECS de Staging
      - name: Force New Deployment ECS Service Staging
        run: |
          echo "Forcing new deployment for Staging service..."
          aws ecs update-service --cluster ${{ needs.deploy-cfn-staging.outputs.cluster_name_staging }} \
                                --service ${{ needs.deploy-cfn-staging.outputs.service_name_staging }} \
                                --force-new-deployment \
                                --region us-east-1
          # Esperar a que el despliegue se estabilice
          echo "Waiting for Staging service deployment to stabilize..."
          aws ecs wait services-stable --cluster ${{ needs.deploy-cfn-staging.outputs.cluster_name_staging }} --services ${{ needs.deploy-cfn-staging.outputs.service_name_staging }} --region us-east-1
          echo "Staging service deployment stable."

  # -------------------------------------
  # Job de Pruebas de Aceptación en Staging
  # -------------------------------------
  test-staging:
    needs: [update-service-staging, deploy-cfn-staging] # Depende de que el servicio esté estable con la nueva versión
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Checkout del código (para acceder a las pruebas)
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Instalar dependencias de prueba
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # Incluye selenium, pytest

      # 4. Ejecutar pruebas de aceptación contra el entorno de Staging
      - name: Run Acceptance Tests against Staging
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-staging.outputs.alb_url_staging }} # URL del ALB de Staging desde salidas
        run: |
          echo "Running acceptance tests against: $APP_BASE_URL"
          sleep 30 # Espera prudencial para el registro del target en el ALB
          pytest tests/test_acceptance_app.py # Ejecutar las pruebas de aceptación

  # -------------------------------------
  # Job de Despliegue CloudFormation Producción
  # -------------------------------------
  deploy-cfn-prod:
    needs: [build-test-publish, test-staging] # Depende de la imagen y de que Staging esté OK
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs: # Definir salida para la URL del ALB de producción
      alb_url_prod: ${{ steps.get_stack_outputs.outputs.alb_url }}
      cluster_name_prod: "calculadora-production-cluster"
      service_name_prod: "calculadora-production-service"

    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 3. Desplegar/Actualizar el stack CloudFormation de Producción
      - name: Deploy CloudFormation Production Stack
        run: |
          # Reconstruir la URI de la imagen usando el secreto y las salidas separadas
          IMAGE_URI="${{ secrets.DOCKERHUB_USERNAME }}/${{ needs.build-test-publish.outputs.repo_name }}:${{ needs.build-test-publish.outputs.image_tag }}"
          echo "Deploying Image URI: $IMAGE_URI" # Log para verificar

          aws cloudformation deploy \
            --template-file template.yaml \
            --stack-name calculadora-prod-stack \
            --parameter-overrides \
              EnvironmentName=production \
              DockerImageUri=$IMAGE_URI \
              LabRoleArn=${{ secrets.LAB_ROLE_ARN }} \
              VpcId=${{ secrets.VPC_ID }} \
              SubnetIds="${{ secrets.SUBNET_IDS }}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changes

      # 4. Obtener las salidas del Stack CloudFormation Producción
      - name: Get Production Stack Outputs
        id: get_stack_outputs
        run: |
          # Instalar jq si no está presente
          if ! command -v jq &> /dev/null; then
             sudo apt-get update && sudo apt-get install -y jq
          fi

          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name calculadora-prod-stack --query "Stacks[0].Outputs" --region us-east-1 --output json)
          echo "Raw Stack Outputs: $STACK_OUTPUTS" # Log

          # Extraer la URL del ALB (ALBDnsName)
          ALB_URL=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="ALBDnsName") | .OutputValue')

          if [ -z "$ALB_URL" ] || [ "$ALB_URL" == "null" ]; then
            echo "Error: No se pudo obtener ALBDnsName del stack de Producción."
            exit 1
          fi

          # Añadir http:// al inicio
          ALB_URL_HTTP="http://${ALB_URL}/"
          echo "ALB URL Production: $ALB_URL_HTTP"
          echo "alb_url=${ALB_URL_HTTP}" >> $GITHUB_OUTPUT

  # -------------------------------------
  # Job de Actualización Servicio Producción (ECS - Forzar despliegue)
  # -------------------------------------
  update-service-prod:
    needs: [build-test-publish, deploy-cfn-prod] # Depende de que CFN haya actualizado la Task Def de Prod
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Configurar credenciales de AWS (CON SESSION TOKEN)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }} # <--- USO DEL SESSION TOKEN
          aws-region: us-east-1

      # 2. Forzar un nuevo despliegue en el servicio ECS de Producción
      - name: Force New Deployment ECS Service Production
        run: |
          echo "Forcing new deployment for Production service..."
          aws ecs update-service --cluster ${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }} \
                                --service ${{ needs.deploy-cfn-prod.outputs.service_name_prod }} \
                                --force-new-deployment \
                                --region us-east-1
          # Esperar a que el despliegue se estabilice
          echo "Waiting for Production service deployment to stabilize..."
          aws ecs wait services-stable --cluster ${{ needs.deploy-cfn-prod.outputs.cluster_name_prod }} --services ${{ needs.deploy-cfn-prod.outputs.service_name_prod }} --region us-east-1
          echo "Production service deployment stable."

  # -------------------------------------
  # Job de Pruebas de Humo en Producción
  # -------------------------------------
  smoke-test-prod:
    needs: [update-service-prod, deploy-cfn-prod] # Depende de que el servicio de prod esté estable
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      # 1. Checkout del código
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Instalar dependencias de prueba
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Ejecutar pruebas de humo contra el entorno de Producción
      - name: Run Smoke Tests against Production
        env:
          APP_BASE_URL: ${{ needs.deploy-cfn-prod.outputs.alb_url_prod }} # URL del ALB de Producción desde salidas
        run: |
          echo "Running smoke tests against: $APP_BASE_URL"
          sleep 30 # Espera prudencial
          pytest tests/test_smoke_app.py # Ejecutar las pruebas de humo